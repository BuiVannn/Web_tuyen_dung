import React, { useState } from "react";
import { useUser } from "@clerk/clerk-react"; // Clerk hook ƒë·ªÉ l·∫•y th√¥ng tin user
import BlogPost from "../components/BlogPost";
import BlogForm from "../components/BlogForm";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";

const Blog = () => {
    const { user } = useUser(); // L·∫•y th√¥ng tin user t·ª´ Clerk
    const [posts, setPosts] = useState([
        {
            id: 1,
            title: "5 m·∫πo ƒë·ªÉ chu·∫©n b·ªã ph·ªèng v·∫•n th√†nh c√¥ng",
            content: "H√£y nghi√™n c·ª©u c√¥ng ty, luy·ªán t·∫≠p c√¢u tr·∫£ l·ªùi, v√† t·ª± tin!",
            author: "Nguy·ªÖn VƒÉn A - ·ª®ng vi√™n",
            date: "2025-03-14",
        },
        {
            id: 2,
            title: "C√°ch thu h√∫t ·ª©ng vi√™n gi·ªèi",
            content: "ƒê∆∞a ra m·ª©c l∆∞∆°ng c·∫°nh tranh v√† m√¥i tr∆∞·ªùng l√†m vi·ªác t·ªët.",
            author: "C√¥ng ty XYZ - Nh√† tuy·ªÉn d·ª•ng",
            date: "2025-03-13",
        },
    ]);

    const [editPost, setEditPost] = useState(null);
    const [isManageMode, setIsManageMode] = useState(false); // Chuy·ªÉn ƒë·ªïi gi·ªØa view/manage mode

    // Mock t·∫°m cho nh√† tuy·ªÉn d·ª•ng (v√¨ ch∆∞a c√≥ backend)
    const currentUser = user
        ? { id: user.id, name: `${user.fullName} - ·ª®ng vi√™n` } // ·ª®ng vi√™n t·ª´ Clerk
        : { id: "mock-recruiter", name: "C√¥ng ty ABC - Nh√† tuy·ªÉn d·ª•ng" }; // Mock nh√† tuy·ªÉn d·ª•ng

    const addPost = (newPost) => {
        setPosts([
            ...posts,
            {
                ...newPost,
                id: posts.length + 1,
                author: currentUser.name, // T·ª± ƒë·ªông l·∫•y t√™n ng∆∞·ªùi ƒëƒÉng nh·∫≠p
                date: new Date().toISOString().split("T")[0],
            },
        ]);
    };

    const updatePost = (updatedPost) => {
        setPosts(posts.map((post) => (post.id === updatedPost.id ? updatedPost : post)));
        setEditPost(null);
    };

    const deletePost = (id) => {
        setPosts(posts.filter((post) => post.id !== id));
    };

    return (
        <div className="min-h-screen flex flex-col bg-gradient-to-b from-gray-100 to-gray-300">
            <Navbar />
            <main className="flex-grow container mx-auto p-6 max-w-4xl">
                {/* Header */}
                <div className="flex justify-between items-center mb-8 bg-white shadow-md p-6 rounded-xl">
                    <h1 className="text-4xl font-extrabold text-gray-800">üì¢ Blog Tuy·ªÉn D·ª•ng</h1>
                    {currentUser && (
                        <button
                            onClick={() => setIsManageMode(!isManageMode)}
                            className="bg-blue-600 text-white px-5 py-2 rounded-lg shadow-lg transition-all duration-200 hover:bg-blue-700"
                        >
                            {isManageMode ? "üîç Chuy·ªÉn sang xem" : "‚úèÔ∏è Qu·∫£n l√Ω b√†i vi·∫øt"}
                        </button>
                    )}
                </div>

                {/* Qu·∫£n l√Ω b√†i vi·∫øt */}
                {isManageMode && currentUser ? (
                    <>
                        <BlogForm addPost={addPost} editPost={editPost} updatePost={updatePost} />
                        <div className="mt-8 space-y-4">
                            {posts
                                .filter((post) => post.author === currentUser.name)
                                .map((post) => (
                                    <BlogPost
                                        key={post.id}
                                        post={post}
                                        onEdit={() => setEditPost(post)}
                                        onDelete={() => deletePost(post.id)}
                                        isManageMode={true}
                                    />
                                ))}
                        </div>
                    </>
                ) : (
                    // Danh s√°ch b√†i vi·∫øt (Ch·∫ø ƒë·ªô xem)
                    <div className="mt-8 grid gap-6">
                        {posts.length > 0 ? (
                            posts.map((post) => (
                                <div
                                    key={post.id}
                                    className="bg-white shadow-lg rounded-xl p-6 hover:shadow-2xl transition-all duration-200"
                                >
                                    <BlogPost post={post} isManageMode={false} />
                                </div>
                            ))
                        ) : (
                            <p className="text-center text-gray-500 text-lg">üì≠ Ch∆∞a c√≥ b√†i vi·∫øt n√†o.</p>
                        )}
                    </div>
                )}
            </main>
            <Footer />
        </div>

    );
};

export default Blog;